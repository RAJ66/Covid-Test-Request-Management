{
  "swagger": "2.0",
  "info": {
    "description": "API with Users and Requests entities",
    "version": "1.0.0",
    "title": "Testes API"
  },
  "host": "localhost:3333",
  "basePath": "/apiv1",
  "tags": [
    {
      "name": "User",
      "description": "API for users"
    },
    {
      "name": "Request",
      "description": "API for requests"
    },
    {
      "name": "Dashboard",
      "description": "API for dashboard"
    },
    {
      "name": "Session",
      "description": "API for session"
    }
  ],
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/users": {
      "get": {
        "tags": ["User"],
        "summary": "Get all users in system",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      },
      "post": {
        "tags": ["User"],
        "summary": "Create new user in system",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User that we want to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Get user with given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that we want to find",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Update user with given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that we want to find",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "user",
            "description": "User with new values of properties",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete user with given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that we want to find",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User is deleted",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/requests": {
      "get": {
        "tags": ["Request"],
        "summary": "Get all requests in system",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Requests"
            }
          }
        }
      },
      "post": {
        "tags": ["Request"],
        "summary": "Create new request in system",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request that we want to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New request is created",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        }
      }
    },
    "/request/{id}": {
      "get": {
        "tags": ["Request"],
        "summary": "Get request with given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of request that we want to find",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request is found",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        }
      },
      "put": {
        "tags": ["Request"],
        "summary": "Update request with given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of request that we want to find",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "Product with new values of properties",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Requests"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request is updated",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        }
      },
      "delete": {
        "tags": ["Request"],
        "summary": "Delete request with given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of request that we want to find",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request is deleted",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        }
      }
    },
    "/dashboard": {
      "get": {
        "tags": ["Dashboard"],
        "summary": "Get all information about the request and results",
        "parameters": [],
        "responses": {
          "200": {}
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Session"],
        "summary": "User login",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "loginRequest",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login"
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": ["Session"],
        "summary": "Information of the login user",
        "parameters": [],
        "responses": {
          "200": {}
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["Session"],
        "summary": "User logout",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User that we want to create",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "New user is created"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "required": ["role"],
      "properties": {
        "nif": {
          "type": "number"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "birthDate": {
          "type": "string",
          "format": "date-time"
        },
        "contact": {
          "type": "number"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "Users": {
      "$ref": "#/definitions/User"
    },
    "Request": {
      "required": ["riskGroup", "riskProfession", "saude24", "userId"],
      "properties": {
        "id": {
          "type": "string"
        },
        "saude24": {
          "type": "boolean"
        },
        "riskGroup": {
          "type": "boolean"
        },
        "riskProfession": {
          "type": "boolean"
        },
        "userId": {
          "$ref": "#/definitions/User/id"
        },
        "employeeId": {
          "$ref": "#/definitions/User/id"
        },
        "firstTestResult": {
          "type": "string"
        },
        "firstTestDate": {
          "type": "string",
          "format": "date-time"
        },
        "secondTestResult": {
          "type": "string"
        },
        "secondTestDate": {
          "type": "string",
          "format": "date-time"
        },
        "requestState": {
          "type": "string"
        },
        "userState": {
          "type": "string"
        },
        "file": {
          "type": "string",
          "default": "undefined"
        }
      }
    },
    "Requests": {
      "$ref": "#/definitions/Request"
    },
    "LoginRequest": {
      "required": ["nif", "password"],
      "properties": {
        "nif": {
          "type": "number"
        },
        "password": {
          "type": "string"
        }
      }
    }
  }
}
